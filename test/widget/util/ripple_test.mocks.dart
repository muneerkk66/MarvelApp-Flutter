// Mocks generated by Mockito 5.4.4 from annotations
// in marvel_app/test/widget/util/ripple_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:marvel_app/core/platform_meta.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PlatformMeta].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformMeta extends _i1.Mock implements _i2.PlatformMeta {
  MockPlatformMeta() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isIos => (super.noSuchMethod(
        Invocation.getter(#isIos),
        returnValue: false,
      ) as bool);

  @override
  bool get isAndroid => (super.noSuchMethod(
        Invocation.getter(#isAndroid),
        returnValue: false,
      ) as bool);

  @override
  bool get isWindows => (super.noSuchMethod(
        Invocation.getter(#isWindows),
        returnValue: false,
      ) as bool);

  @override
  bool get isMac => (super.noSuchMethod(
        Invocation.getter(#isMac),
        returnValue: false,
      ) as bool);

  @override
  bool get isLinux => (super.noSuchMethod(
        Invocation.getter(#isLinux),
        returnValue: false,
      ) as bool);

  @override
  bool get isFuchsia => (super.noSuchMethod(
        Invocation.getter(#isFuchsia),
        returnValue: false,
      ) as bool);
}
