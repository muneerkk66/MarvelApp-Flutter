// Mocks generated by Mockito 5.4.4 from annotations
// in marvel_app/test/blocs/home_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dio/dio.dart' as _i4;
import 'package:fast_immutable_collections/fast_immutable_collections.dart'
    as _i6;
import 'package:marvel_app/core/error_handler.dart' as _i8;
import 'package:marvel_app/domain/entities/character.dart' as _i7;
import 'package:marvel_app/domain/entities/common.dart' as _i2;
import 'package:marvel_app/domain/usecase/fetch_character_usecase.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCancellable_0<T> extends _i1.SmartFake
    implements _i2.Cancellable<T> {
  _FakeCancellable_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCancelToken_2 extends _i1.SmartFake implements _i4.CancelToken {
  _FakeCancelToken_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FetchCharacterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchCharacterUseCase extends _i1.Mock
    implements _i5.FetchCharacterUseCase {
  MockFetchCharacterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Cancellable<_i6.IList<_i7.Character>> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _FakeCancellable_0<_i6.IList<_i7.Character>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        ),
      ) as _i2.Cancellable<_i6.IList<_i7.Character>>);
}

/// A class which mocks [ErrorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorHandler extends _i1.Mock implements _i8.ErrorHandler {
  MockErrorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String getErrorMessage(dynamic exception) => (super.noSuchMethod(
        Invocation.method(
          #getErrorMessage,
          [exception],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #getErrorMessage,
            [exception],
          ),
        ),
      ) as String);
}

/// A class which mocks [Cancellable].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancellable<T> extends _i1.Mock implements _i2.Cancellable<T> {
  MockCancellable() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<T> get call => (super.noSuchMethod(
        Invocation.getter(#call),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.getter(#call),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.getter(#call),
            ),
      ) as _i3.Future<T>);

  @override
  _i4.CancelToken get token => (super.noSuchMethod(
        Invocation.getter(#token),
        returnValue: _FakeCancelToken_2(
          this,
          Invocation.getter(#token),
        ),
      ) as _i4.CancelToken);
}
